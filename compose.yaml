version: '3.8'

services:
  postgres:
    image: postgres:16
    container_name: aeon-postgres
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - aeon-network
    healthcheck:
      test: [ "CMD-SHELL","pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "${POSTGRES_PORT}:5432"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: aeon-rabbitmq
    restart: unless-stopped
    env_file: .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - aeon-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"

  aeon-bkd:
    image: aeon-bkd
    container_name: aeon-api
    restart: unless-stopped
    build:
      context: .
      dockerfile: Aeon.API/Dockerfile
      args:
        BUILD_CONFIGURATION: Release
    env_file: .env
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_URLS: http://+:80
    networks:
      - aeon-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  nginx:
    image: nginx:alpine
    container_name: aeon-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./nginx/logs:/var/log/nginx
    ports:
      - "8080:80"
      - "8443:443"
    networks:
      - aeon-network
    depends_on:
      - aeon-bkd
    command: >
      /bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done &
                  nginx -g "daemon off;"'

  certbot:
    image: certbot/certbot
    container_name: aeon-certbot
    restart: unless-stopped
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: >
      /bin/sh -c 'trap exit TERM; while :; do certbot renew;
                  sleep 12h & wait $${!}; done;'

networks:
  aeon-network:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
