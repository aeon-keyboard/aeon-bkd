version: '3.8'

services:
  # PostgreSQL service
  postgres:
    image: postgres:latest
    container_name: aeon-postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./secrets.json:/run/secrets/secrets.json:ro
    environment:
      - POSTGRES_USER_FILE=/run/secrets/secrets.json
      - POSTGRES_PASSWORD_FILE=/run/secrets/secrets.json
      - POSTGRES_DB=aeondb
    networks:
      - aeon-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    ports:
      - "${POSTGRES_PORT:-5432}:5432"


  # RabbitMQ service
  rabbitmq:
    image: rabbitmq:3-management
    container_name: aeon-rabbitmq
    restart: unless-stopped
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./secrets.json:/run/secrets/secrets.json:ro
    environment:
      - RABBITMQ_DEFAULT_USER_FILE=/run/secrets/secrets.json
      - RABBITMQ_DEFAULT_PASS_FILE=/run/secrets/secrets.json
    networks:
      - aeon-network
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"


  # Application service
  aeon-bkd:
    image: aeon-bkd
    container_name: aeon-api
    restart: unless-stopped
    build:
      context: .
      dockerfile: Aeon.API/Dockerfile
      args:
        - BUILD_CONFIGURATION=Release
    volumes:
      - ./secrets.json:/app/secrets.json:ro
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      # Only bridge communication, I resoved TLS at Nginx
      - ASPNETCORE_URLS=http://+:80
    networks:
      - aeon-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy


  # Nginx proxy
  nginx:
    image: nginx:alpine
    container_name: aeon-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./nginx/logs:/var/log/nginx
    ports:
      - "${HTTPS_PORT:-443}:443"
      - "${HTTP_PORT:-80}:80"
    networks:
      - aeon-network
    depends_on:
      - aeon-bkd
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"


  # Certbot para Let's Encrypt
  certbot:
    image: certbot/certbot
    container_name: aeon-certbot
    restart: unless-stopped
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"



networks:
  aeon-network:
    driver: bridge
    name: aeon-network
    internal: false


volumes:
  postgres_data:
    name: aeon-postgres-data
  rabbitmq_data:
    name: aeon-rabbitmq-data